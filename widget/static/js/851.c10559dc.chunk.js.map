{"version":3,"file":"static/js/851.c10559dc.chunk.js","mappings":"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","sources":["app/Components/Filters/TagFilters/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { filterPostDataAppendWebFilter } from \"../../../../actions/themeActions\";\n\nclass TagFilters extends PureComponent {\n    state = {\n        dropDownOffset: 0,\n        networkID: null,\n        tagName: \"\"\n    };\n\n    onClickTagFilters = (tagName) => event => {\n        this.props.changeFilterStatus(1)\n        const tstamp = Math.floor(Date.now() / 1000);\n        const { appendData, wall } = this.props;\n        const { networkID } = this.state\n        let postCount = wall.ThemeRule.numberOfPosts;\n        this.props.filterPostDataAppendWebFilter(\n            wall.Wall.id,\n            tstamp,\n            postCount,\n            0,\n            appendData.after,\n            appendData.heightEvent,\n            tagName\n        );\n        this.setState({ tagName: tagName })\n    }\n    onClickWebFilters = (networkID) => event => {\n        this.props.changeFilterStatus(2)\n        const tstamp = Math.floor(Date.now() / 1000);\n        const { appendData, wall, postData, wallId } = this.props;\n        let postCount = wall.ThemeRule.numberOfPosts;\n        this.props.filterPostDataAppendWebFilter(\n            wall.Wall.id,\n            tstamp,\n            postCount,\n            networkID,\n            appendData.after,\n            appendData.heightEvent,\n            null\n        );\n        this.setState({ networkID: networkID })\n    }\n    offset(el) {\n        var rect = el.getBoundingClientRect(),\n            scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n            scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        return { top: rect.top + scrollTop, left: rect.left + scrollLeft }\n    }\n    componentDidMount() {\n        var dropDown = document.querySelector('.tb_tag_btn_dropdown');\n        if (dropDown != null) {\n            var dropDownOffset = this.offset(dropDown);\n            if (dropDownOffset.left < 0) {\n                this.setState({\n                    dropDownOffset: 40\n                })\n            }\n        }\n\n    }\n\n\n    render() {\n        const { dropDownOffset, filters, tagName, networkID } = this.state;\n        // const shortFilter = (filters && filters.length) ? filters.sort((a, b) => b.postCount - a.postCount) : []\n        const { N_filters, filter_tags, webFilters, languageSetting } = this.props\n        const T_filter = N_filters ? 3 : 6\n\n        return (\n            <div className=\"tb_tag_filter_container\">\n                {!(webFilters && webFilters.length > 1) ? <div className=\"tb_tag_filter_list\" onClick={this.onClickWebFilters(0)}>\n                    <div className={`tb_tag_btn ${(networkID == 0) && this.props.webFiltersStatus == 2 ? ` tb_active` : ``}`}>{languageSetting.filterButton}</div>\n                </div> : null}\n                {(filter_tags && filter_tags.length) ? filter_tags.map((item, index) => <>\n                    {index < T_filter ? <div className=\"tb_tag_filter_list\">\n                        <div className={`tb_tag_btn ${item.tagName == tagName && this.props.webFiltersStatus == 1 ? ` tb_active` : ``}`} onClick={this.onClickTagFilters(item.tagName)}>{item.tagName} ({item.postCount})</div>\n                    </div> : null}\n                </>) : null}\n                <div className=\"tb_tag_filter_list\">\n                    {filter_tags && filter_tags.length && filter_tags.length > T_filter ? <> <div className=\"tb_tag_btn\">More <div className=\"tb_tag_btn_arrow tb__icon tb-chevron-down\"></div></div>\n                        <div className=\"tb_tag_btn_dropdown\" style={{ transform: `translate(${dropDownOffset}px, 0px)` }}>\n                            {filter_tags.map((item, index) => <>{\n                                index > T_filter - 1 ? <div className=\"tb_tag_filter_list\">\n                                    <div className={`tb_tag_btn ${item.tagName == tagName && this.props.webFiltersStatus == 1 ? ` tb_active` : ``}`} onClick={this.onClickTagFilters(item.tagName)} >{item.tagName} ({item.postCount})</div>\n                                </div> : null}</>)}\n                        </div>\n                    </> : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        filterPostDataAppendWebFilter: (wallID, timeStamp, postCount, networkId, after, heightEvent, tagName) => dispatch(filterPostDataAppendWebFilter(wallID, timeStamp, postCount, networkId, after, heightEvent, tagName))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TagFilters)"],"names":["TagFilters","state","dropDownOffset","networkID","tagName","onClickTagFilters","event","props","changeFilterStatus","tstamp","Math","floor","Date","now","appendData","wall","postCount","ThemeRule","numberOfPosts","filterPostDataAppendWebFilter","Wall","id","after","heightEvent","setState","onClickWebFilters","postData","wallId","el","rect","getBoundingClientRect","scrollLeft","window","pageXOffset","document","documentElement","scrollTop","pageYOffset","top","left","dropDown","querySelector","this","offset","filters","N_filters","filter_tags","webFilters","languageSetting","T_filter","className","length","onClick","webFiltersStatus","filterButton","map","item","index","style","transform","PureComponent","connect","dispatch","wallID","timeStamp","networkId"],"sourceRoot":""}