{"version":3,"file":"static/js/476.a5f9c301.chunk.js","mappings":"oNAGMA,EAAiBC,EAAAA,MAAW,kBAAM,8BAAN,IAE5BC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAEgB,OAFhBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAQ,CAAEC,UAAW,MAAb,EACRC,kBAAoB,SAACD,GAAD,OAAe,SAAAE,GACjC,EAAKC,MAAMC,mBAAmB,GAE9B,IAAMC,EAASC,KAAKC,MAAMC,KAAKC,MAAQ,KACvC,EAA6B,EAAKN,MAA1BO,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAChBC,EAAYD,EAAKE,UAAUC,cAC/B,EAAKX,MAAMY,8BACTJ,EAAKK,KAAKC,GACVZ,EACAO,EACAZ,EACAU,EAAWQ,MACXR,EAAWS,YACX,MAEF,EAAKC,SAAS,CAAEpB,UAAWA,GAC5B,CAhBmB,IAqCnB,OArCmB,8BAkBpB,WAAU,IAAD,OACP,EAAwCqB,KAAKlB,MAArCmB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBACZvB,EAAcqB,KAAKtB,MAAnBC,UACR,OACE,iBAAKwB,UAAU,6BAAf,WACE,gBAAKA,UAAU,0BAA0BC,QAASJ,KAAKpB,kBAAkB,GAAzE,UACE,iBAAKuB,UAAS,yCAAsCxB,EAAF,wBAAlD,UAA8FuB,EAAgBG,aAA9G,UAGCJ,GAAcA,EAAWK,OAAS,EAAKL,EAAWM,KAAI,SAACC,GACtD,OAAO,gBAAKL,UAAU,0BAA0BC,QAAS,EAAKxB,kBAAkB4B,EAAKC,QAAQb,IAAtF,UACL,gBAAKO,UAAS,oCAAgCxB,GAAaA,GAAa6B,EAAKC,QAAQb,IAAsC,GAA/B,EAAKd,MAAM4B,iBAA1D,wBAA7C,UACE,SAAC,EAAAC,SAAD,CAAUC,UAAU,wBAApB,UAA2B,SAACrC,EAAD,CAAgBsC,gBAAiB,2BAA4BC,QAASN,EAAKC,QAASM,WAAW,SAG/H,IAAI,OAIZ,OAvCGtC,CAAuBuC,EAAAA,eAmD7B,WAAeC,EAAAA,EAAAA,KATS,SAAAvC,GACtB,MAAO,CAAC,CAET,IAC0B,SAAAwC,GACzB,MAAO,CACLxB,8BAA+B,SAACyB,EAAQC,EAAW7B,EAAW8B,EAAWxB,EAAOC,EAAawB,GAA9D,OAA0EJ,GAASxB,EAAAA,EAAAA,IAA8ByB,EAAQC,EAAW7B,EAAW8B,EAAWxB,EAAOC,EAAawB,GAA9K,EAElC,GACD,CAA4D7C,E","sources":["app/Components/Filters/FilterType/CircularFilter.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport { connect } from 'react-redux';\nimport { filterPostDataAppendWebFilter } from '../../../../actions/themeActions'\nconst FilterNetworks = React.lazy(() => import(\"./Elements/FilterNetworks\"));\n\nclass CircularFilter extends PureComponent {\n  state = { networkID: null }\n  onClickWebFilters = (networkID) => event => {\n    this.props.changeFilterStatus(2)\n\n    const tstamp = Math.floor(Date.now() / 1000);\n    const { appendData, wall } = this.props;\n    let postCount = wall.ThemeRule.numberOfPosts;\n    this.props.filterPostDataAppendWebFilter(\n      wall.Wall.id,\n      tstamp,\n      postCount,\n      networkID,\n      appendData.after,\n      appendData.heightEvent,\n      null\n    );\n    this.setState({ networkID: networkID })\n  }\n\n  render() {\n    const { webFilters, languageSetting } = this.props;\n    const { networkID } = this.state;\n    return (\n      <div className=\"tb_filter_circular_wrapper\">\n        <div className=\"tb_filter_circular_list\" onClick={this.onClickWebFilters(0)}>\n          <div className={`tb_filter_circular_button_text ${(!networkID) ? ` tb_filter_active` : ``}`}>{languageSetting.filterButton}  </div>\n        </div>\n        {\n          (webFilters && webFilters.length > 0) ? webFilters.map((item) => {\n            return <div className=\"tb_filter_circular_list\" onClick={this.onClickWebFilters(item.Network.id)}>\n              <div className={`tb_filter_circular_button ${(networkID && networkID == item.Network.id) && this.props.webFiltersStatus == 2 ? ` tb_filter_active` : ``}`}>\n                <Suspense fallback={<></>}><FilterNetworks filterIconClass={'tb_filter_round_edge_ico'} network={item.Network} isDefault={false} /></Suspense>\n              </div>\n            </div>\n          }) : null\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    filterPostDataAppendWebFilter: (wallID, timeStamp, postCount, networkId, after, heightEvent, tagName) => dispatch(filterPostDataAppendWebFilter(wallID, timeStamp, postCount, networkId, after, heightEvent, tagName))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(CircularFilter);"],"names":["FilterNetworks","React","CircularFilter","state","networkID","onClickWebFilters","event","props","changeFilterStatus","tstamp","Math","floor","Date","now","appendData","wall","postCount","ThemeRule","numberOfPosts","filterPostDataAppendWebFilter","Wall","id","after","heightEvent","setState","this","webFilters","languageSetting","className","onClick","filterButton","length","map","item","Network","webFiltersStatus","Suspense","fallback","filterIconClass","network","isDefault","PureComponent","connect","dispatch","wallID","timeStamp","networkId","tagName"],"sourceRoot":""}