{"version":3,"file":"static/js/812.b42c437b.chunk.js","mappings":"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","sources":["app/Components/UserComponents/SharePost/Elements/SharedSuccess.js","app/Components/UserComponents/SharePost/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\n\nexport default class SharedSuccess extends PureComponent {\n  render() {\n    return  <div className=\"tb_share_post_succ\">\n                <div className=\"tb_share_post_succ_00\">\n                    <div className=\"tb_share_post_title\">Success</div>\n                    <div className=\"tb_share_post_p\">Post shared successfully on email</div>\n                    <div className=\"tb_share_post_succ_ico\">\n                        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 98.5 98.5\" enable-background=\"new 0 0 98.5 98.5\" space=\"preserve\">\n                            <path className=\"tb_share_post_suc_svg\" fill=\"none\" stroke-width=\"8\" stroke-miterlimit=\"10\" d=\"M81.7,17.8C73.5,9.3,62,4,49.2,4C24.3,4,4,24.3,4,49.2s20.3,45.2,45.2,45.2s45.2-20.3,45.2-45.2c0-8.6-2.4-16.6-6.5-23.4l0,0L45.6,68.2L24.7,47.3\"/>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { connect } from 'react-redux';\nimport { sharePostByEmail, sharePostClosePopUP } from '../../../../actions/themeActions';\nimport SharedSuccess from \"./Elements/SharedSuccess\";\n\n\nconst validateEmail = (email) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nclass SharePostModal extends PureComponent {\n\n    state = {\n        email: null,\n        emailError: false,\n        submitErrorMessage: null,\n        modalShow: false,\n        successModal: false,\n        loadbtn: false\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({ modalShow: true }), 100);\n        this.popUpCloseClckOnWindow()\n    }\n    onTextEmail = event => {\n        this.setState({ email: event.target.value, emailError: false }, () => {\n            if (this.state.email == null || this.state.email.length == 0 || !validateEmail(this.state.email) || this.state.email.includes(\"mailinator\")) this.setState({ emailError: true })\n        })\n\n    }\n\n    onSubmitData = event => {\n        const { email } = this.state;\n        const { item } = this.props;\n        const userName = this.props.userName;\n        const postLink = this.props.postLink;\n\n        const postData = {image:item.file, rating: item.rating, network: item.network.id, authorImage: item.author.picture, authorName: item.author.name, authorUsername: item.author.username, content: item.content, time: item.createdAt, mediaType : item.type}\n\n\n\n        if ((email && email.length > 0 && validateEmail(email) && !email.includes(\"mailinator\"))) {\n            this.setState({ loadbtn: true })\n            sharePostByEmail({ email: email, username: userName, link: postLink, post_data: postData }).then((response) => {\n                this.setState({ successModal: true, loadbtn: false })\n            })\n                .catch((error) => {\n                    this.setState({ loadbtn: false })\n                    const { data } = error.response;\n                    if (data.response_code == 404) {\n                        this.setState({ submitErrorMessage: data.message })\n                    } else {\n                        this.setState({ submitErrorMessage: 'Something went wrong' })\n                    }\n                });\n        } \n        else {\n            if (this.state.email == null || this.state.email.length == 0 || !validateEmail(this.state.email) || email.includes(\"mailinator\")) this.setState({ emailError: true })\n        }\n    }\n\n    onClose = event => {\n        const { sharePostClosePopUP } = this.props;\n        sharePostClosePopUP();\n    }\n    popUpCloseClckOnWindow=()=>{\n        var self=this;\n        document.addEventListener(\n          \"click\",\n          (event)=>{if(event.target.matches(\".tb_share_post_modal\")){\n            self.props.sharePostClosePopUP()\n          }},\n          false\n        )\n      }\n    render() {\n        const { email, emailError, submitErrorMessage, successModal, modalShow, loadbtn } = this.state;\n        return (\n            <div className={`tb_share_post_modal ${modalShow ? `tb_modal_show` : ``}`}>\n                <div className=\"tb_share_post_container\">\n                    <div className=\"tb_share_post_body\">\n                        <div className=\"tb_share_post_close\" onClick={this.onClose}>\n                            <div className=\"tb_share_close_ico tb__icon tb-close-alt\"> </div>\n                        </div>\n                        {successModal ?\n                            <SharedSuccess />\n                            :\n                            <div className=\"tb_share_post_wrapper\">\n                                <div className=\"tb_share_post_title\">Share This Social Post On Email</div>\n                                <div className=\"tb_share_post_p\">Share the social media post with anyone by entering the email address below.</div>\n\n                                <div className=\"tb_share_post_form\">\n                                    <div className=\"tb_share_post_form_group\">\n                                        <div className=\"tb_share_post_label\">Email <div className=\"tb_share_post_required\">*</div></div>\n                                        <input type=\"email\" value={email} className=\"tb_share_post_input\" onChange={this.onTextEmail} placeholder=\"Enter email address\" />\n                                        {emailError ? <div className=\"tb_share_post_error_\">* Please enter correct email.</div> : null}\n                                    </div>\n                                    <div className=\"tb_share_post_buttons\">\n                                        <div className=\"tb_share_post_cancel\" onClick={this.onClose}>\n                                            Cancel\n                                        </div>\n                                        <div className={`tb_share_post_submit ${loadbtn ? 'tb_share_post_spinner' : ''}`} onClick={this.onSubmitData}>\n                                            Submit\n                                        </div>\n                                    </div>\n                                    {submitErrorMessage && submitErrorMessage.length > 0 ? <div className=\"tb_share_post_error\">\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" version=\"1.1\">\n                                            <g id=\"Stockholm-icons-/-Code-/-Info-circle\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                                                <rect id=\"bound\" x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\n                                                <circle id=\"Oval-5\" fill=\"#db4b20\" opacity=\"0.3\" cx=\"12\" cy=\"12\" r=\"10\" />\n                                                <rect id=\"Rectangle-9\" fill=\"#db4b20\" x=\"11\" y=\"10\" width=\"2\" height=\"7\" rx=\"1\" />\n                                                <rect id=\"Rectangle-9-Copy\" fill=\"#db4b20\" x=\"11\" y=\"7\" width=\"2\" height=\"2\" rx=\"1\" />\n                                            </g>\n                                        </svg>\n                                        {submitErrorMessage}\n                                    </div> : null}\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        item : state.modalPop.shareData\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        sharePostClosePopUP: () => dispatch(sharePostClosePopUP())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SharePostModal);"],"names":["SharedSuccess","className","version","id","xmlns","xlink","x","y","viewBox","space","fill","d","PureComponent","validateEmail","email","test","String","toLowerCase","SharePostModal","state","emailError","submitErrorMessage","modalShow","successModal","loadbtn","onTextEmail","event","setState","target","value","length","includes","onSubmitData","item","props","userName","postLink","postData","image","file","rating","network","authorImage","author","picture","authorName","name","authorUsername","username","content","time","createdAt","mediaType","type","sharePostByEmail","link","post_data","then","response","catch","error","data","response_code","message","onClose","sharePostClosePopUP","popUpCloseClckOnWindow","self","document","addEventListener","matches","setTimeout","this","onClick","onChange","placeholder","width","height","stroke","opacity","cx","cy","r","rx","connect","modalPop","shareData","dispatch"],"sourceRoot":""}